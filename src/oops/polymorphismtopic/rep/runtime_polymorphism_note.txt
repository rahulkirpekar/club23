Polymorphism:-  Ability to take more than one form(method).
---------------

			Type of Polymorphism
			---------------------

	CompileTime-Compiler		Runtime--JVM
		|			    |
	1) CompileTime			2) Runtime
	/ Static Binding		/ Dynamic Binding
	/ Early Binding			/ Late Binding

Ex:- 					Ex:- 				 
-----					----
---> Method Overloadding			---> Method Overrdding
-----------------------------------------------------------------------------------------
Method Overrdding:-
---------------------
				Vehicle(void getSpec()---OLD history)
				  |
	-----------------------------------------------------------
	|			  |				|
    TwVehicle			LmvVehicle		   HmvVehicle	
void getSpec()			void getSpec()			void getSpec()		
{				{				{
	// Tw--operation part		// Lmv--operation part		// Hmv--operation part
}				}				}
----------------------------
//Vehicle v = new Vehicle();

// Runtime Polymorphism
Vehicle v = new TwVehicle();

v.getSpec();// TwVehicle--getSpec();

v = new LmvVehicle();
v.getSpec();// LmvVehicle--getSpec();


v = new HmvVehicle();
v.getSpec();// HmvVehicle--getSpec();



TwVehicle tw = new TwVehicle();
LmvVehicle lmv = new LmvVehicle();
HmvVehicle hmv = new HmvVehicle();
----------------------------
Vehicle v = new Vehicle();
v.getSpec();
----------------------------
TwVehicle tw = new TwVehicle();
tw.getSpec();
----------------------------
LmvVehicle lmv = new LmvVehicle();
lmv.getSpec();





				RbiBank(int getRoi()---0)
				  |
	-----------------------------------------------------------
	|			  |				|
    AxisBank			BankofBaroda		    HdfcBank	
int getRoi()			int getRoi()			int getRoi()		
{				{				{
	return 10;			return 9;			return 12;
}				}				}


r = new AxisBank();

System.out.println(" AxisBank Rateof Interest : " + r.getRoi());
-----------------------------------------------------------------------


29/4/2023



Abstrcation--- To Increase Application Security.
------------
		Type of Abstrcation
		-------------------
1) 0 to 100 abstraction		2) 100% abstrcation
------------------------	------------------------	
--> Asbtract class		---> interface

public abstract class Vehicle
{
	// 1) Dm's
	// 2) Mf's
		1) Abstract Method
		2) NonAbstract Method
	// 3) Static method
	// 4) final method
	// 5) constructor 
	//public abstract void getSpec();	
}

			Vehicle(public abstract void getSpec();)
			  |
	----------------------------------------------
	|		  |			|
    TwVehicle		LmvVehicle	  HmvVehicle
    getSpec()            getSpec()         







Final -- is a NonAccess Modifier
--------
1) local
2) Dm's / Instance variable
3) method
4) class

		A--test---
		|
		B--test---final
		|
		C
		















		